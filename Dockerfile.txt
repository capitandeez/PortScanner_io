FROM python:3.11-slim
WORKDIR /app
COPY . /app
RUN pip install --no-cache-dir -r requirements.txt || true
ENTRYPOINT ["python", "portscanner.py"] Extend the dockerfile

## Extended version :
# Stage 1: Builder (for compiling dependencies)
FROM python:3.11-slim as builder
WORKDIR /app

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    python3-dev \
    && rm -rf /var/lib/apt/lists/*

# Create virtual env
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Install requirements first for layer caching
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Stage 2: Runtime (minimal image)
FROM python:3.11-slim
WORKDIR /app

# Copy only necessary files from builder
COPY --from=builder /opt/venv /opt/venv
COPY . .

# Security hardening
RUN apt-get update && apt-get install -y --no-install-recommends \
    libcap2-bin \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && groupadd -r scanner && useradd -r -g scanner scanner \
    && chown -R scanner:scanner /app \
    && setcap 'cap_net_raw=+ep' /opt/venv/bin/python3.11  # For SYN scans

# Environment
ENV PATH="/opt/venv/bin:$PATH"
ENV PYTHONUNBUFFERED=1
ENV SCAN_TIMEOUT=2.0

# Switch to non-root user
USER scanner

# Health check (for long scans)
HEALTHCHECK --interval=30s --timeout=3s \
    CMD ps aux | grep '[p]ortscanner.py' || exit 1

ENTRYPOINT ["python", "portscanner.py"]